ICEBOX
[] - integration with paragraphs
[] - automatic line generation choice based on weights???
  []-check the weights of the outputs (describe a healthy range?)
  [] - perhaps just a percentage of lines? -- could work but would be bad for very dense text
[] - check if object vs set is optimal? Could be {word: count}, then when checking the overlap simply multiply their values
[] - special character dealing?
[] - expanding stopwords
[] - make into one file
[] - log10 vs ln

ONGOING
[] - turn into npm package
    [] - clean upthe ui
    [] - fit into one file
[] - clean code
DONE


[x] - use an object key: value
use a json file to store the stop words
  json files that has an array, require the json file array in json -> set in the file
x get rid of getters/setters
get rid of abbreviations
json .org
x ES6 TEMPLATE STRINGS

[x] verticies-> verticies
function to establish edge in both directions -> makeUndirectedEdge

change _initialize
process string -> map
turn regex to its own function -> completely describe the regx with the function name

use arrow functoin

98 -> map.filter

precompile regex
106 map

THEN add vertex

sum function(iteratble, higher order function)

lodash -> sumBy
use lodash to simplify code base
